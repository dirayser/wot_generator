require('dotenv').config();

const express = require('express');
const helmet = require('helmet');

const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');

const bot = new Telegraf(process.env.BOT_TOKEN);

// üìå –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Wargaming
const WG_AUTH_URL = `https://api.worldoftanks.eu/wot/auth/login/?application_id=${process.env.WG_APP_ID}&redirect_uri=${process.env.REDIRECT_URI}`;

// üìå –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.start((ctx) => {
    const startPayload = ctx.message.text.split(" ")[1]; // –ü–æ–ª—É—á–∞–µ–º access_token –ø–æ—Å–ª–µ /start

    if (startPayload) {
        handleToken(ctx, startPayload);
    } else {
        ctx.reply(
            "–ü—Ä–∏–≤–µ—Ç! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Wargaming:",
            Markup.inlineKeyboard([
                Markup.button.url("üîë –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Wargaming", WG_AUTH_URL + `${ctx.from.id}/`)
            ])
        );
    }
});

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ access_token –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function handleToken(ctx, accessToken) {
    try {
        const url = `https://api.worldoftanks.eu/wot/account/info/`;
        const response = await axios.get(url, {
            params: {
                application_id: process.env.WG_APP_ID,
                access_token: accessToken
            }
        });

        const playerData = Object.values(response.data.data)[0];
        if (!playerData) {
            await ctx.reply("‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞.");
            return;
        }

        await ctx.reply(
            `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\nüë§ –ò–≥—Ä–æ–∫: ${playerData.nickname}\nüéÆ –ë–æ–∏: ${playerData.statistics.battles}`
        );

    } catch (error) {
        console.error(error);
        await ctx.reply("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }
}

// üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch({
    polling: {
        interval: 1000,
    },
});

const app = express();
const port = process.env.PORT;

app.use(express.json());
app.use(helmet());

app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "*");
    next();
});

app.listen(port, () => {
    console.log(`Server started on port: ${port}`);
});

app.get('/:telegram_id', async (req, res) => {
    const { telegram_id } = req.params; // üìå –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ path
    const { access_token, account_id, nickname, expires_at } = req.query; // üìå –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    if (!access_token || !account_id || !nickname || !expires_at) {
        return res.status(400).send("‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
    }

    try {
        // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        await bot.telegram.sendMessage(
            telegram_id,
            `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\nüë§ –ò–≥—Ä–æ–∫: ${nickname}\nüéÆ ID: ${account_id}\nüîë –¢–æ–∫–µ–Ω: ${access_token}\n‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${new Date(expires_at * 1000).toLocaleString()}`
        );

        // üìå –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ Telegram
        res.redirect(`https://t.me/${process.env.BOT_USERNAME}`);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
        res.status(500).send("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
    }
});