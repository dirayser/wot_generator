require('dotenv').config();

const express = require('express');
const helmet = require('helmet');

const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');

const bot = new Telegraf(process.env.BOT_TOKEN);

// üìå –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Wargaming
const WG_AUTH_URL = `https://api.worldoftanks.eu/wot/auth/login/?application_id=${process.env.WG_APP_ID}&redirect_uri=${process.env.REDIRECT_URI}`;

const userDataMap = new Map(); // üìå –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (userId ‚Üí { accessToken, accountId })

// üìå –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.start((ctx) => {
    const startPayload = ctx.message.text.split(" ")[1]; // –ü–æ–ª—É—á–∞–µ–º access_token –ø–æ—Å–ª–µ /start

    if (startPayload) {
        handleToken(ctx, startPayload);
    } else {
        ctx.reply(
            "–ü—Ä–∏–≤–µ—Ç! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Wargaming:",
            Markup.inlineKeyboard([
                Markup.button.url("üîë –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Wargaming", WG_AUTH_URL + `${ctx.from.id}/`)
            ])
        );
    }
});

// üìå –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function handleToken(userId, accessToken, accountId) {
    try {
        const url = `https://api.worldoftanks.eu/wot/account/info/`;
        const response = await axios.get(url, {
            params: {
                application_id: process.env.WG_APP_ID,
                access_token: accessToken,
                account_id: accountId
            }
        });

        console.log(response.data);
        const playerData = Object.values(response.data.data)[0];
        if (!playerData) {
            await bot.telegram.sendMessage(userId, "‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞.");
            return;
        }

        // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º accessToken –∏ accountId –≤ Map
        userDataMap.set(userId, { accessToken, accountId });

        await bot.telegram.sendMessage(
            userId,
            `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\nüë§ –ò–≥—Ä–æ–∫: ${playerData.nickname}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /randomtank`
        );

    } catch (error) {
        console.error(error);
        await bot.telegram.sendMessage(userId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /randomtank
bot.command("randomtank", async (ctx) => {
    const userId = ctx.from.id;
    const messageParts = ctx.message.text.split(" ");

    let level = null;
    let nation = null;

    if (messageParts.length > 1) {
        level = !isNaN(messageParts[1]) ? messageParts[1] : null;
    }

    if (messageParts.length > 2) {
        nation = messageParts[2];
    }

    console.log(userDataMap);

    // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!userDataMap.has(userId)) {
        await ctx.reply("‚ö† –í–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Wargaming.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.");
        return;
    }

    const { accessToken, accountId } = userDataMap.get(userId);
    await getRandomTank(userId, accessToken, accountId, level, nation);
});

// üìå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∞–Ω–∫–∞
async function getRandomTank(userId, accessToken, accountId, level = null, nation = null) {
    try {
        const url = `https://api.worldoftanks.eu/wot/tanks/stats/`;
        const response = await axios.get(url, {
            params: {
                application_id: process.env.WG_APP_ID,
                access_token: accessToken,
                account_id: accountId
            }
        });

        const tanks = response.data.data[accountId];

        if (!tanks || tanks.length === 0) {
            await bot.telegram.sendMessage(userId, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–Ω–∫–æ–≤ –≤ –∞–Ω–≥–∞—Ä–µ.");
            return;
        }

        // üîπ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞–Ω–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é –∏/–∏–ª–∏ –Ω–∞—Ü–∏–∏
        let filteredTanks = tanks.filter(tank => tank.in_garage == true);

        if (level) {
            filteredTanks = filteredTanks.filter(tank => tank.tier === parseInt(level));
        }

        if (nation) {
            filteredTanks = filteredTanks.filter(tank => tank.nation === nation);
        }

        if (filteredTanks.length === 0) {
            await bot.telegram.sendMessage(userId, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∞–Ω–∫–æ–≤.");
            return;
        }

        // üîπ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–Ω–∫
        const randomTank = filteredTanks[Math.floor(Math.random() * filteredTanks.length)];

        // üîπ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–Ω–∫–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        const tankInfoUrl = `https://api.worldoftanks.eu/wot/encyclopedia/tankinfo/`;
        const tankInfoResponse = await axios.get(tankInfoUrl, {
            params: {
                application_id: process.env.WG_APP_ID,
                tank_id: randomTank.tank_id
            }
        });

        const tankData = tankInfoResponse.data.data[randomTank.tank_id];

        if (!tankData) {
            await bot.telegram.sendMessage(userId, "‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–Ω–∫–µ.");
            return;
        }

        const tankName = tankData.name;
        const tankImage = tankData.images.big_icon; // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–Ω–∫–∞

        // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Ç–∞–Ω–∫–∞
        await bot.telegram.sendPhoto(
            userId,
            tankImage,
            {
                caption: `üé≤ –í–∞–º –≤—ã–ø–∞–ª —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–Ω–∫:\nüöÄ **${tankName}**\n‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${tankData.tier}\nüè≥Ô∏è –ù–∞—Ü–∏—è: ${tankData.nation}`
            }
        );

    } catch (error) {
        console.error(error);
        await bot.telegram.sendMessage(userId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∞–Ω–∫–∞.");
    }
}



// üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch({
    polling: {
        interval: 1000,
    },
});

const app = express();
const port = process.env.PORT;

app.use(express.json());
app.use(helmet());

app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "*");
    next();
});

app.listen(port, () => {
    console.log(`Server started on port: ${port}`);
});


// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Wargaming —Å userId –≤ –ø—É—Ç–∏
app.get('/:telegram_id', async (req, res) => {
    const { telegram_id } = req.params;
    const { access_token, account_id } = req.query;

    console.log({telegram_id, access_token, account_id });

    if (!access_token || !telegram_id || !account_id) {
        return res.status(400).send("‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
    }

    // üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º accessToken –∏ accountId –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await handleToken(telegram_id, access_token, account_id);

    // üìå –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ Telegram
    res.redirect(`https://t.me/${process.env.BOT_USERNAME}`);
});