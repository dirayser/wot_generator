require('dotenv').config();

const express = require('express');
const helmet = require('helmet');

const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');

const tankDataMap = new Map(); // üìå –ö–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–Ω–∫–∞—Ö

const bot = new Telegraf(process.env.BOT_TOKEN);

// üìå –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Wargaming
const WG_AUTH_URL = `https://api.worldoftanks.eu/wot/auth/login/?application_id=${process.env.WG_APP_ID}&redirect_uri=${process.env.REDIRECT_URI}`;

const userDataMap = new Map(); // üìå –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (userId ‚Üí { accessToken, accountId })

// üìå –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.start((ctx) => {
    const startPayload = ctx.message.text.split(" ")[1]; // –ü–æ–ª—É—á–∞–µ–º access_token –ø–æ—Å–ª–µ /start

    if (startPayload) {
        handleToken(ctx, startPayload);
    } else {
        ctx.reply(
            "–ü—Ä–∏–≤–µ—Ç! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Wargaming:",
            Markup.inlineKeyboard([
                Markup.button.url("üîë –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Wargaming", WG_AUTH_URL + `${ctx.from.id}/`)
            ])
        );
    }
});

// üìå –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function handleToken(userId, accessToken, accountId) {
    try {
        const url = `https://api.worldoftanks.eu/wot/account/info/`;
        const response = await axios.get(url, {
            params: {
                application_id: process.env.WG_APP_ID,
                access_token: accessToken,
                account_id: accountId
            }
        });

        console.log(response.data);
        const playerData = Object.values(response.data.data)[0];
        if (!playerData) {
            await bot.telegram.sendMessage(userId, "‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞.");
            return;
        }

        // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º accessToken –∏ accountId –≤ Map
        userDataMap.set(`${userId}`, { accessToken, accountId });

        await bot.telegram.sendMessage(
            userId,
            `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\nüë§ –ò–≥—Ä–æ–∫: ${playerData.nickname}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /randomtank`
        );

    } catch (error) {
        console.error(error);
        await bot.telegram.sendMessage(userId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /randomtank
bot.command("randomtank", async (ctx) => {
    const userId = ctx.from.id;
    const messageParts = ctx.message.text.split(" ");

    let level = null;
    let nation = null;

    if (messageParts.length > 1) {
        level = !isNaN(messageParts[1]) ? messageParts[1] : null;

        if (isNaN(messageParts[1])) {
            nation = messageParts[1]
        }
    }

    if (messageParts.length > 2) {
        nation = messageParts[2];
    }

    console.log({ level, nation });

    // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!userDataMap.has(`${userId}`)) {
        await ctx.reply("‚ö† –í–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Wargaming.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.");
        return;
    }

    const { accessToken, accountId } = userDataMap.get(`${userId}`);
    await getRandomTank(ctx.chat.id, accessToken, accountId, level, nation);
});

// üìå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∞–Ω–∫–∞
async function getRandomTank(chatId, accessToken, accountId, level = null, nation = null, userName = "–ò–≥—Ä–æ–∫") {
    try {
        // üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–Ω–∫–æ–≤ –≤ –∞–Ω–≥–∞—Ä–µ
        const tanksStatsUrl = `https://api.worldoftanks.eu/wot/tanks/stats/`;
        const statsResponse = await axios.get(tanksStatsUrl, {
            params: {
                application_id: process.env.WG_APP_ID,
                access_token: accessToken,
                account_id: accountId
            }
        });

        const tanks = statsResponse.data.data[accountId];

        if (!tanks || tanks.length === 0) {
            await bot.telegram.sendMessage(chatId, `‚ö† ${userName}, —É –≤–∞—Å –Ω–µ—Ç —Ç–∞–Ω–∫–æ–≤ –≤ –∞–Ω–≥–∞—Ä–µ.`);
            return;
        }

        // üìå –°–æ–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ (–¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –Ω–∞—Ü–∏—é –∫ —Ç–∞–Ω–∫–∞–º –≤ –∞–Ω–≥–∞—Ä–µ)
        let availableTanks = tanks
            .map(tank => ({
                ...tank,
                ...tankDataMap.get(tank.tank_id) // –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏
            }))
            .filter(tank => tank.name && tank.in_garage); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ –∞–Ω–≥–∞—Ä–µ

        // üìå –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        if (level) {
            availableTanks = availableTanks.filter(tank => tank.tier === parseInt(level));
        }

        // üìå –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
        if (nation) {
            availableTanks = availableTanks.filter(tank => tank.nation === nation);
        }

        if (availableTanks.length === 0) {
            await bot.telegram.sendMessage(chatId, `‚ö† ${userName}, —É –≤–∞—Å –Ω–µ—Ç —Ç–∞–Ω–∫–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É.`);
            return;
        }

        // üìå –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–Ω–∫
        const randomTank = availableTanks[Math.floor(Math.random() * availableTanks.length)];

        // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–∞–Ω–∫–∞
        await bot.telegram.sendPhoto(
            chatId,
            randomTank.images.big_icon,
            {
                caption: `üé≤ **${userName} –ø–æ–ª—É—á–∏–ª —Ç–∞–Ω–∫:**\nüöÄ **${randomTank.name}**\n‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${randomTank.tier}\nüè≥Ô∏è –ù–∞—Ü–∏—è: ${randomTank.nation}`,
                parse_mode: "Markdown"
            }
        );

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ getRandomTank:", error);
        await bot.telegram.sendMessage(chatId, `‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∞–Ω–∫–∞ –¥–ª—è ${userName}.`);
    }
}

bot.command("randomtank_all", async (ctx) => {
    const chatId = ctx.chat.id;
    const userIdsInChat = Object.keys(userDataMap); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ userDataMap

    // üìå –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —á–∞—Ç–µ
    const usersInChat = userIdsInChat
        .map(id => parseInt(id))
        .filter(id => ctx.chat.all_members_are_administrators || ctx.from.id === id); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω–∏ –≤ —á–∞—Ç–µ

    if (usersInChat.length === 0) {
        await ctx.reply("‚ö† –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
        return;
    }

    // üìå –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–∞–Ω–∫–∞ (1-10)
    const randomTier = Math.floor(Math.random() * 10) + 1;

    await ctx.reply(`üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–Ω–∫–∏ **—É—Ä–æ–≤–Ω—è ${randomTier}** –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...`);

    // üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–Ω–∫ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for (const userId of usersInChat) {
        const { accessToken, accountId } = userDataMap.get(userId);
        const userName = ctx.chat.type === "private" ? ctx.from.first_name : `[${ctx.from.first_name}](tg://user?id=${userId})`;

        await getRandomTank(chatId, accessToken, accountId, randomTier, null, userName);
    }
});



// üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch({
    polling: {
        interval: 1000,
    },
});

const app = express();
const port = process.env.PORT;

app.use(express.json());
app.use(helmet());

app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "*");
    next();
});

app.listen(port, () => {
    console.log(`Server started on port: ${port}`);
    loadTankData();
});


// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Wargaming —Å userId –≤ –ø—É—Ç–∏
app.get('/:telegram_id', async (req, res) => {
    const { telegram_id } = req.params;
    const { access_token, account_id } = req.query;

    console.log({telegram_id, access_token, account_id });

    if (!access_token || !telegram_id || !account_id) {
        return res.status(400).send("‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
    }

    // üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º accessToken –∏ accountId –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await handleToken(telegram_id, access_token, account_id);

    // üìå –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ Telegram
    res.redirect(`https://t.me/${process.env.BOT_USERNAME}`);
});

// üìå –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–Ω–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async function loadTankData() {
    try {
        console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–Ω–∫–∞—Ö...");
        const url = `https://api.worldoftanks.eu/wot/encyclopedia/vehicles/`;
        const response = await axios.get(url, {
            params: { application_id: process.env.WG_APP_ID }
        });

        if (response.data.status !== "ok") {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–Ω–∫–∞—Ö:", response.data.error);
            return;
        }

        // üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–Ω–∫–∏ –≤ `Map`
        for (const [tankId, tankInfo] of Object.entries(response.data.data)) {
            tankDataMap.set(parseInt(tankId), tankInfo);
        }

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tankDataMap.size} —Ç–∞–Ω–∫–æ–≤.`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–Ω–∫–∞—Ö:", error);
    }
}